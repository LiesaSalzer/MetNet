% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/structural.R
\name{addSpectSimil}
\alias{addSpectSimil}
\title{Adding a spectral similarity matrix to the "structural" 
`AdjacencyMatrix`.}
\usage{
addSpectSimil(spectra, am_structural, methods = c("ndotproduct"), ...)
}
\arguments{
\item{spectra}{`Spectra` object that contains a unique "id" (see `spectraVariables()`), 
matching to the row-/colnames of the structural `AdjacencyMatrix` and storing
important information of MS2 data (i.e. mz and intensity).}

\item{am_structural}{`AdjacencyMatrix` of type "structural" that was created using matching MS1 
data of the same data set. The respective spectral similarity matrices will 
be added into am_structural}

\item{methods}{`character` vector containing the methods that will be used. All methods can 
be used that are already implemented in the `RforMassSpectrometry` 
infrastructure, e.g. (`"ndotproduct"`(default), `"gnps"`). 
`methods` are then forwarded to `FUN` in `Spectra::compareSpectra()`.}

\item{...}{parameters passed to the functions  `combineSpectra` from the `Spectra` 
package (e.g. `MAPFUN`, `tolerance`, `ppm`, `type`, ...).}
}
\value{
`AdjacencyMatrix` of type "structural" containing the respective 
adjacency matrices in the `assay` slot as specified by `methods`
}
\description{
The function `addSpectSimil` infers adjacency matrix topologies from
spectral similarity methods and adds matrices of these networks into the 
"structural" `AdjacencyMatrix` object. 
The function includes functionality to calculate adjacency matrices 
based on spectral similarity methods included in the `Spectra` package.
It uses a `Spectra`-object, storing the ms2 information and using 
a previously created `AdjacencyMatrix` object from the type "structural" 
in order to perform the mapping on the ms1 features. 
The function returns an `AdjacencyMatrix` object of adjacency matrices that 
are defined by `methods`.
}
\details{
The function `addSpectSimil` includes functionality to calculate adjacency
matrices based on different spectral similarity measures provided by the 
`RforMassSpectrometry` infrastructure. 
`addSpectSimil` calls the different functions (`FUN` parameter in 
`Spectra::compareSpectra()`) as specified by `methods`. The default is the 
normalized dotproduct `"ndotproduct"`. Moreover, different parameters (e.g. 
`MAPFUN`, `tolerance`, `ppm`, `type`, ...) of the function 
`Spectra::compareSpectra()` are forwarded by `...`. 
`addSpectSimil` will create adjacency matrices using the specified methods 
and will return the "structural" `AdjacencyMatrix` containing the added
weighted adjacency matrices in the `assays` slot.

It is important that features IDs in the MS1 data (i.e. row/colnames of 
`am_structural`) are matching to the IDs of the respective MS2 data (i.e. 
`"id"` in the `spectraVariables()`). Also, the `Spectra` object `spectra` is 
required to have unique `"id"`s, meaning on representative spectrum per 
feature. If features store multiple spectra, spectra consolidation has to be 
performed first (e.g. using the function `Spectra::combineSpectra`).
}
\examples{

data("x_test", package = "MetNet")
transformation <- rbind(
    c("Monosaccharide (-H2O)", "C6H10O5", "162.0528234315"),
    c("Disaccharide (-H2O)", "C12H20O11", "340.1005614851"),
    c("Trisaccharide (-H2O)", "C18H30O15", "486.1584702945"))
transformation <- data.frame(group = transformation[, 1],
                                formula = transformation[, 2],
                                mass = as.numeric(transformation[, 3]))
am_struct <- structural(x_test, transformation, var = c("group", "mass"),
    ppm = 10, directed = TRUE)

data("ms2_test", package = "MetNet")

am_struct-spect <- addSpectSimil(spectra = sps_sub, 
                           am_structural = am_struct, 
                           methods = "ndotproduct", 
                           tolerance = 0.05)

}
\author{
Liesa Salzer
}
